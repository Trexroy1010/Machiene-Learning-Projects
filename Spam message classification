import numpy as np
import pandas as pd
import nltk
import string
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score


nltk.download('stopwords')
nltk.download('punkt')


ps = PorterStemmer()

# Load dataset
df = pd.read_csv(r"C:\Users\User\Downloads\Documents\spam.csv", encoding="ISO-8859-1")
df.drop(columns=['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], inplace=True)
df.rename(columns={'v1': 'target', 'v2': 'text'}, inplace=True)

# Encode target labels
encoder = LabelEncoder()
df['target'] = encoder.fit_transform(df['target'])

# Remove duplicates and handle missing
df = df.drop_duplicates(keep='first')
df['text'] = df['text'].fillna("")

# Text preprocessing function
def transform_text(text):
    text = text.lower()
    text = nltk.word_tokenize(text)
    text = [i for i in text if i.isalnum()]
    text = [i for i in text if i not in stopwords.words('english')]
    text = [ps.stem(i) for i in text]
    return " ".join(text)

# Apply transformation
df['transformed_text'] = df['text'].apply(transform_text)

# TF-IDF Vectorization
tfidf = TfidfVectorizer(max_features=3000)
X = tfidf.fit_transform(df['transformed_text']).toarray()
y = df['target'].values

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)

# Train Multinomial Naive Bayes model
model = MultinomialNB()
model.fit(X_train, y_train)

# Evaluate (optional)
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# -------------------------------
# Message Input for Prediction
# -------------------------------
print("\n--- SPAM CLASSIFIER ---")
while True:
    user_input = input("\nEnter a message (or type 'exit' to quit):\n> ")
    if user_input.lower() == 'exit':
        break
    transformed = transform_text(user_input)
    vectorized = tfidf.transform([transformed]).toarray()
    prediction = model.predict(vectorized)[0]
    print("Prediction:", "Spam ‚ùå" if prediction == 1 else "Ham ‚úÖ")












from flask import Flask, render_template, request
import nltk
import string
import pickle
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer

app = Flask(__name__)

# Load your trained model and tfidf vectorizer
model = pickle.load(open('model.pkl', 'rb'))
tfidf = pickle.load(open('vectorizer.pkl', 'rb'))

ps = PorterStemmer()
nltk.download('stopwords')
nltk.download('punkt')

def transform_text(text):
    text = text.lower()
    tokens = nltk.word_tokenize(text)
    filtered = [ps.stem(word) for word in tokens if word.isalnum() and word not in stopwords.words('english')]
    return " ".join(filtered)

@app.route('/', methods=['GET', 'POST'])
def index():
    result = ""
    if request.method == 'POST':
        input_text = request.form['message']
        transformed = transform_text(input_text)
        vector_input = tfidf.transform([transformed]).toarray()
        prediction = model.predict(vector_input)[0]
        result = "Spam üö´" if prediction == 1 else "Not Spam ‚úÖ"
    return render_template('index.html', result=result)

if __name__ == '__main__':
    app.run(debug=True)
