import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
from pandas.core.config_init import use_inf_as_na_doc

sp500 = yf.Ticker("^GSPC")
sp500 = sp500.history(period = "max")
#print(sp500.index)
sp500.plot.line(y="Close", use_index = True)


#dat6a cleaning
del sp500["Dividends"]
del sp500["Stock Splits"]


#target
sp500["Tomorrow"] = sp500["Close"].shift(-1)
sp500["Target"] = (sp500["Tomorrow"] > sp500["Close"]).astype(int)

#remove all data before 1990
sp500 = sp500.loc["1990-01-01":].copy()



#start training
from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_estimators=100, min_samples_split=100, random_state=1)
train = sp500.iloc[:-100]
test = sp500.iloc[-100:]

predictors = ["Close", "Volume","Open","High","Low"]
model.fit(train[predictors], train["Target"])

from sklearn.metrics import precision_score, confusion_matrix
preds = model.predict(test[predictors])
preds = pd.Series(preds, index = test.index)
print(precision_score(test["Target"], preds))
combined = pd.concat([test["Target"], preds], axis = 1)


#build a robust way to test the algorithm
def predict(train,test, predictors, model):
    model.fit(train[predictors], train["Target"])
    preds = model.predict(test[predictors])
    preds = pd.Series(preds, index = test.index, name = "Predictions")
    combined = pd.concat([test['Target'], preds], axis = 1)
    return combined

#function for backtest, the start value is the certain amount of data to train, 2500 is the amount of days in 10 years
def backtest(data, model, predictors, start = 2500, step = 250):
    all_predictions = []

    for i in range(start, data.shape[0], step):
        train = data.iloc[0:i].copy()
        test = data.iloc[i:(i+step)].copy()
        predictions = predict(train, test, predictors, model)
        all_predictions.append(predictions)
    return pd.concat(all_predictions)

predictions = backtest(sp500, model, predictors)
print(predictions["Predictions"].value_counts())
print(precision_score(predictions["Target"], predictions["Predictions"]))

#adding additional predictors to our model, here  2= last2 days, 5 = last work week, 60 = last 2 -3 months, 250, last year, last quarter
horizons = [2,5,60,250,1000]
new_predictors = []
for horizon in horizons:
    rolling_average = sp500.rolling(horizoz).mean()
    ratio_column = f"Close_Ratio_{horizon}"
    sp500[ratio_column] = sp500["Close"] / rolling_average["Close"]
    trend_column = f"Trend_{horizon}"
    sp500[trend_column] = sp500.shift(1).rolling(horizon).sum()["Target"]

    new_predictors += [ratio_column, trend_column]

sp500 = sp500.dropna()


#updating the model
model = RandomForestClassifier(n_estimators=200, min_samples_split=50, random_state=1)

def predict(train, test, predictors, model):
    model.fit(train[predictors], train["Target"])
    preds = model.predict_proba(test[predictors][:,1])
    preds[preds >= .6] = 1
    preds[preds < 0.6] = 0
    preds = pd.Series(preds, index = test.index, name = "Predictions")
    combined = pd.concat([test["Target"], preds], axis = 1)
    return combined

predictions = backtest(sp500, model, new_predictors)
print(predictions)
