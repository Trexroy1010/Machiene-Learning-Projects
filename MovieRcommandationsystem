#import libraries
import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load dataset
movies_data = pd.read_csv(r"C:\Users\User\Downloads\Documents\movies.csv")

# Features to use
selected_features = ['genres', 'keywords', 'tagline', 'cast', 'director']

# Fill NaN values
for feature in selected_features:
    movies_data[feature] = movies_data[feature].fillna('')

# Combine text features for similarity calculation
combined_features = movies_data['genres'] + ' ' + movies_data['keywords'] + ' ' + \
                    movies_data['tagline'] + ' ' + movies_data['cast'] + ' ' + movies_data['director']

# Convert text to numerical values
vectorizer = TfidfVectorizer()
feature_vectors = vectorizer.fit_transform(combined_features)

# Compute cosine similarity
similarity = cosine_similarity(feature_vectors)

# Get user input
movie_name = input('Enter your favorite movie name: ')

# Find closest match
list_of_all_titles = movies_data['title'].tolist()
find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

if not find_close_match:
    print("No close match found. Please try another movie.")
    exit()

close_match = find_close_match[0]

# Get index of the movie
index_of_the_movie = movies_data[movies_data.title == close_match].index[0]

# Extract Director & Cast
director = movies_data.loc[index_of_the_movie, 'director']
cast_list = movies_data.loc[index_of_the_movie, 'cast'].split(', ')  # Assuming names are comma-separated
top_cast = cast_list[:5] if len(cast_list) >= 5 else cast_list  # Pick top 5 or fewer if not enough

print(f"\nDirector: {director}")
print(f"Top Cast: {', '.join(top_cast)}\n")

# Recommend movies based on cosine similarity
similarity_score = list(enumerate(similarity[index_of_the_movie]))
sorted_similar_movies = sorted(similarity_score, key=lambda x: x[1], reverse=True)

print("Movies Suggested for you: \n")
for i, movie in enumerate(sorted_similar_movies[:30]):
    index = movie[0]
    title_from_index = movies_data.loc[index, 'title']
    print(f"{i+1}. {title_from_index}")

# Find movies by Director
movies_by_director = movies_data[movies_data['director'] == director]['title'].tolist()
movies_by_director = [m for m in movies_by_director if m != close_match][:5]  # Exclude the input movie

# Find movies by Top Cast
movies_by_cast = {}
for actor in top_cast:
    movies_by_actor = movies_data[movies_data['cast'].str.contains(actor, na=False)]['title'].tolist()
    movies_by_actor = [m for m in movies_by_actor if m != close_match][:5]  # Exclude input movie
    movies_by_cast[actor] = movies_by_actor

# Display Director Recommendations
print(f"\nMovies by Director ({director}):")
for i, movie in enumerate(movies_by_director, start=1):
    print(f"{i}. {movie}")

import re

# Extract the cast as a list of names
raw_cast_string = movies_data.loc[index_of_the_movie, 'cast']
cast_list = raw_cast_string.split(' ')  # Split by space

# Group names properly (Handling multi-word names)
proper_cast_list = []
temp_name = ""

for word in cast_list:
    if temp_name:  # If there is a stored part of a name
        temp_name += " " + word
        proper_cast_list.append(temp_name)
        temp_name = ""
    else:
        temp_name = word

# Keep only the first 5 actors
top_cast = proper_cast_list[:5] if len(proper_cast_list) >= 5 else proper_cast_list
print('\n')
print(f"Top Cast (Processed): {', '.join(top_cast)}\n")

# Find movies by Top Cast
movies_by_cast = {}

for actor in top_cast:
    actor_cleaned = re.escape(actor.strip())  # Escape special characters to prevent regex errors
    filtered_movies = movies_data[movies_data['cast'].str.contains(fr'\b{actor_cleaned}\b', case=False, na=False, regex=True)]

    # Get movie titles and exclude the input movie
    movies_by_actor = filtered_movies['title'].tolist()
    movies_by_actor = [m for m in movies_by_actor if m.lower() != close_match.lower()][:5]

    movies_by_cast[actor] = movies_by_actor

# Display Cast Recommendations
for actor, movies in movies_by_cast.items():
    if movies:  # Only print if movies were found
        print(f"\nMovies by {actor}:")
        for i, movie in enumerate(movies, start=1):
            print(f"{i}. {movie}")

